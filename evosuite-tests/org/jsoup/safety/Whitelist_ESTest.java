/*
 * This file was automatically generated by EvoSuite
 * Mon Sep 20 22:02:40 GMT 2021
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Whitelist_ESTest extends Whitelist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Document document0 = Parser.parseBodyFragment("1_SbQp@+$'' ", "!gK`_\"J0z@}s");
      Attribute attribute0 = new Attribute("Too many redirects occurred trying to load URL %s", "");
      boolean boolean0 = whitelist0.isSafeAttribute("Too many redirects occurred trying to load URL %s", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        whitelist0.addTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        whitelist0.addProtocols((String) null, "", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      assertNotNull(whitelist0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Whitelist whitelist1 = whitelist0.removeEnforcedAttribute("!zK(BQ,", "!zK(BQ,");
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        whitelist0.removeProtocols("1_SbQp@+$'' ", "", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Attributes attributes0 = whitelist0.getEnforcedAttributes(":%s(%d)");
      assertTrue(attributes0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      boolean boolean0 = whitelist0.isSafeTag("1_SbQp@+$'' ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      // Undeclared exception!
      try { 
        whitelist0.addAttributes("rtc", (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("UA0JMeJ-/?#LoP", "UA0JMeJ-/?#LoP", "h*o}P");
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        whitelist0.removeAttributes("", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        whitelist0.removeTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      Whitelist whitelist1 = whitelist0.preserveRelativeLinks(false);
      assertSame(whitelist1, whitelist0);
  }
}
