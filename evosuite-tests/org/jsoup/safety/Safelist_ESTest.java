/*
 * This file was automatically generated by EvoSuite
 * Mon Sep 20 22:02:08 GMT 2021
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Element;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.safety.Safelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Safelist_ESTest extends Safelist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      Safelist.Protocol safelist_Protocol0 = new Safelist.Protocol("h-$tlnUi)>0ba");
      boolean boolean0 = safelist_Protocol0.equals(safelist0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Safelist.Protocol safelist_Protocol0 = Safelist.Protocol.valueOf("nofollow");
      boolean boolean0 = safelist_Protocol0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      Attributes attributes0 = safelist0.getEnforcedAttributes("sun.net.http.allowRestrictedHeaders");
      assertTrue(attributes0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("a", parseSettings0);
      Element element0 = new Element(tag0, "a");
      CDataNode cDataNode0 = new CDataNode("Zdl)");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = new Attribute("fbU\"Ea", "fbU\"Ea", attributes0);
      boolean boolean0 = safelist0.isSafeAttribute("a", element0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Header map must not be null";
      Safelist safelist1 = safelist0.addTags(stringArray0);
      boolean boolean0 = safelist1.isSafeTag("Header map must not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      boolean boolean0 = safelist0.isSafeTag("http");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "[%s*=%s]";
      stringArray0[1] = "#/UP#P";
      stringArray0[2] = ";h[";
      stringArray0[3] = "#/UP#P";
      stringArray0[4] = "[%s*=%s]";
      stringArray0[5] = ";h[";
      stringArray0[6] = "#/UP#P";
      safelist0.addProtocols("[%s*=%s]", "#/UP#P", stringArray0);
      // Undeclared exception!
      try { 
        safelist0.removeProtocols("[%s*=%s]", "Wgc(>Y5^UC{", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ist+B-&OpQC";
      stringArray0[1] = "ist+B-&OpQC";
      stringArray0[2] = "ist+B-&OpQC";
      stringArray0[3] = "ist+B-&OpQC";
      stringArray0[4] = "ist+B-&OpQC";
      stringArray0[5] = "ist+B-&OpQC";
      stringArray0[6] = "ist+B-&OpQC";
      stringArray0[7] = "ist+B-&OpQC";
      stringArray0[8] = "ist+B-&OpQC";
      Safelist safelist1 = safelist0.addProtocols("ist+B-&OpQC", "ist+B-&OpQC", stringArray0);
      Safelist safelist2 = safelist1.removeProtocols("ist+B-&OpQC", "ist+B-&OpQC", stringArray0);
      assertSame(safelist2, safelist0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        safelist0.removeProtocols("d7", "d7", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "+4p;Ruj\":ki";
      Safelist safelist1 = safelist0.addProtocols("+4p;Ruj\":ki", "+4p;Ruj\":ki", stringArray0);
      Safelist safelist2 = safelist1.addProtocols("+4p;Ruj\":ki", "+4p;Ruj\":ki", stringArray0);
      assertSame(safelist2, safelist1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "V\"";
      stringArray0[1] = "#";
      stringArray0[2] = "#";
      stringArray0[3] = "#";
      stringArray0[4] = "V\"";
      stringArray0[5] = "-r";
      Safelist safelist1 = safelist0.addProtocols("V\"", "#", stringArray0);
      Safelist safelist2 = safelist1.addProtocols("V\"", "-r", stringArray0);
      assertSame(safelist2, safelist0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      safelist0.addEnforcedAttribute(":all", "org.jsoup.helper.HttpConnection$Request", ":all");
      Safelist safelist1 = safelist0.removeEnforcedAttribute(":all", "pre");
      assertSame(safelist1, safelist0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      Safelist safelist1 = safelist0.removeEnforcedAttribute("c8=.O", "c8=.O");
      assertSame(safelist0, safelist1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      Safelist safelist1 = safelist0.addEnforcedAttribute("readonly", "readonly", "Nfu'2");
      Safelist safelist2 = safelist1.addEnforcedAttribute("readonly", "Nfu'2", "Nfu'2");
      assertSame(safelist2, safelist0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "cite";
      stringArray0[1] = "cite";
      stringArray0[2] = "c8=.O";
      stringArray0[3] = "cite";
      // Undeclared exception!
      try { 
        safelist0.removeAttributes(":all", stringArray0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "cite";
      stringArray0[1] = "cite";
      stringArray0[2] = "c8=.O";
      stringArray0[3] = "cite";
      safelist0.addAttributes("cite", stringArray0);
      Safelist safelist1 = safelist0.removeAttributes("cite", stringArray0);
      assertSame(safelist0, safelist1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "N*(q@2$$R/QqhbQ8Y";
      stringArray0[1] = "q";
      Safelist safelist1 = safelist0.removeAttributes("b", stringArray0);
      assertSame(safelist0, safelist1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "N*(q@2$$R/QqhbQ8Y";
      stringArray0[1] = "q";
      Safelist safelist1 = safelist0.removeAttributes("ol", stringArray0);
      assertSame(safelist0, safelist1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        safelist0.removeAttributes("t!uyg|2!F1S", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "=";
      stringArray0[1] = "=";
      stringArray0[2] = "=";
      stringArray0[3] = "=";
      stringArray0[4] = "=";
      stringArray0[5] = "=";
      stringArray0[6] = "=";
      safelist0.addAttributes("=", stringArray0);
      Safelist safelist1 = safelist0.addAttributes("=", stringArray0);
      assertSame(safelist0, safelist1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        safelist0.addAttributes("q", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "N*(q@2$$R/QqhbQ8Y";
      stringArray0[1] = "q";
      Safelist safelist1 = safelist0.removeTags(stringArray0);
      assertSame(safelist1, safelist0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      Safelist safelist1 = safelist0.preserveRelativeLinks(false);
      assertSame(safelist0, safelist1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      Safelist safelist1 = new Safelist(safelist0);
      assertFalse(safelist1.equals((Object)safelist0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "| jM[AMo$?V'H<";
      Safelist safelist1 = safelist0.removeAttributes(":all", stringArray0);
      assertSame(safelist1, safelist0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "h1";
      Safelist safelist1 = safelist0.addAttributes("tbody", stringArray0);
      Safelist safelist2 = safelist1.removeEnforcedAttribute("tbody", "%flmSF9Fc}");
      assertSame(safelist2, safelist1);
  }
}
