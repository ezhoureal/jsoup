/*
 * This file was automatically generated by EvoSuite
 * Mon Sep 20 21:13:31 GMT 2021
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Collector;
import org.jsoup.select.CombiningEvaluator;
import org.jsoup.select.Evaluator;
import org.jsoup.select.StructuralEvaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CombiningEvaluator_ESTest extends CombiningEvaluator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[8];
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_IsLastChild0);
      evaluatorArray0[0] = (Evaluator) structuralEvaluator_Has0;
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      Document document0 = Document.createShell("%t");
      boolean boolean0 = combiningEvaluator_Or0.matches(document0, document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[1];
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("org.jsoup.select.CombiningEvaluator$And");
      evaluatorArray0[0] = (Evaluator) evaluator_ContainsOwnText0;
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(combiningEvaluator_Or0);
      Collector.FirstFinder collector_FirstFinder0 = structuralEvaluator_Has0.finder;
      Tag tag0 = Tag.valueOf("Must be false");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Must be false", attributes0);
      Document document0 = new Document("");
      Element element0 = collector_FirstFinder0.find(formElement0, document0);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[1];
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      evaluatorArray0[0] = (Evaluator) evaluator_IsRoot0;
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      Document document0 = Document.createShell("");
      combiningEvaluator_And0.matches(document0, document0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[4];
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      evaluatorArray0[3] = (Evaluator) evaluator_IsEmpty0;
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("org.jsoup.select.CombiningEvaluator$And", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.CombiningEvaluator$And", attributes0);
      // Undeclared exception!
      try { 
        combiningEvaluator_And0.matches(formElement0, formElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.CombiningEvaluator$And", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedHashSet<Evaluator> linkedHashSet0 = new LinkedHashSet<Evaluator>();
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(linkedHashSet0);
      Element element0 = new Element("rphE~[>hsonI");
      boolean boolean0 = combiningEvaluator_And0.matches(element0, element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      combiningEvaluator_Or0.add(evaluator_IsFirstChild0);
      Evaluator evaluator0 = combiningEvaluator_Or0.rightMostEvaluator();
      assertSame(evaluator0, evaluator_IsFirstChild0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ArrayList<Evaluator> arrayList0 = new ArrayList<Evaluator>();
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(arrayList0);
      Evaluator evaluator0 = combiningEvaluator_And0.rightMostEvaluator();
      assertNull(evaluator0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[0];
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      String string0 = combiningEvaluator_Or0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      // Undeclared exception!
      try { 
        combiningEvaluator_Or0.replaceRightMostEvaluator(evaluator_IsFirstChild0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ArrayList<Evaluator> arrayList0 = new ArrayList<Evaluator>();
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(arrayList0);
      String string0 = combiningEvaluator_And0.toString();
      assertEquals("", string0);
  }
}
