/*
 * This file was automatically generated by EvoSuite
 * Mon Sep 20 22:32:02 GMT 2021
 */

package org.jsoup.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.internal.StringUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringUtil_ESTest extends StringUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(1079);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringUtil.releaseBuilder(stringBuilder0);
      boolean boolean1 = StringUtil.isAscii("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = StringUtil.resolve("7$", "X:@Wee:E>=");
      assertEquals("X:@Wee:E>=", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = StringUtil.resolve("*GWQ:#Y$8Y{=eo' N1t", "[L'bcX#(hq[s3J}$");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "'EPifR;\";2u6]ux#'3", uRLStreamHandler0);
      URL uRL2 = StringUtil.resolve(uRL1, "");
      assertFalse(uRL2.equals((Object)uRL0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URL uRL1 = StringUtil.resolve(uRL0, "?                              ");
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample?", uRL1.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = StringUtil.isAscii("\u087E\u087E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = StringUtil.isAscii("KRoC=&g;Vw(vL3");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[3] = "";
      boolean boolean0 = StringUtil.inSorted("", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[3] = "                              ";
      stringArray0[5] = "";
      stringArray0[6] = " ";
      boolean boolean0 = StringUtil.inSorted("1gKdAs4qQ(C~[}", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "!UxQ(_9:W]WPH%!ujkZ";
      boolean boolean0 = StringUtil.in("!UxQ(_9:W]WPH%!ujkZ", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean0 = StringUtil.in("               ", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = StringUtil.normaliseWhitespace("                              ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringUtil.StringJoiner stringUtil_StringJoiner0 = new StringUtil.StringJoiner("4mpn<S%OJ[R1o");
      StringBuilder stringBuilder0 = stringUtil_StringJoiner0.sb;
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "       ", true);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(32);
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "Array must not contain any null objects", true);
      assertEquals("Array must not contain any null objects", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = StringUtil.isInvisibleChar(173);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = StringUtil.isInvisibleChar(8203);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(160);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("6");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("[L'bcX#(hq[s3J}$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank("java.lang.String@0000000002");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank("                              ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = StringUtil.padding(1);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.padding((-2148));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = StringUtil.padding(1028);
      assertEquals("                              ", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add("*GWQ:#Y$8Y{=eo' N1t");
      String string0 = StringUtil.join((Collection<?>) stack0, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[24];
      stringArray0[0] = "[L'bcX#(hq[s3J}$";
      String string0 = StringUtil.join(stringArray0, "Array must not contain any null:objects");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtil.join(stringArray0, "]\tnq2Y?`width must be > 0");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringUtil.StringJoiner stringUtil_StringJoiner0 = new StringUtil.StringJoiner("width must be > 0");
      Object object0 = new Object();
      StringUtil.StringJoiner stringUtil_StringJoiner1 = stringUtil_StringJoiner0.append(object0);
      assertSame(stringUtil_StringJoiner0, stringUtil_StringJoiner1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
  }
}
