/*
 * This file was automatically generated by EvoSuite
 * Mon Sep 20 22:18:36 GMT 2021
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.parser.Token;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Token_ESTest extends Token_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Token.EOF token_EOF0 = new Token.EOF();
      boolean boolean0 = token_EOF0.isEOF();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      boolean boolean0 = token_Comment0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Token.Character token_Character0 = new Token.Character();
      boolean boolean0 = token_Character0.isCharacter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      boolean boolean0 = token_EndTag0.isCharacter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      boolean boolean0 = token_EndTag0.isComment();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      boolean boolean0 = token_EndTag0.isEndTag();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Token.Character token_Character0 = new Token.Character();
      boolean boolean0 = token_Character0.isEndTag();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      boolean boolean0 = token_StartTag0.isStartTag();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Token.CData token_CData0 = new Token.CData("o");
      boolean boolean0 = token_CData0.isStartTag();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      boolean boolean0 = token_Doctype0.isDoctype();
      assertTrue(boolean0);
      assertFalse(token_Doctype0.isForceQuirks());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      boolean boolean0 = token_EndTag0.isDoctype();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      Token.Comment token_Comment1 = token_Comment0.append("");
      Token.Comment token_Comment2 = token_Comment1.append('u');
      assertSame(token_Comment2, token_Comment1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      Token.Comment token_Comment1 = token_Comment0.append('z');
      Token.Comment token_Comment2 = token_Comment1.append("");
      assertSame(token_Comment2, token_Comment0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      Token.Comment token_Comment1 = token_Comment0.append("");
      String string0 = token_Comment1.toString();
      assertEquals("<!---->", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.Tag token_Tag0 = token_StartTag0.name("[=pualZn'0)x4M\"O/");
      Attributes attributes0 = new Attributes();
      attributes0.put("[=pualZn'0)x4M\"O/", "[=pualZn'0)x4M\"O/");
      token_Tag0.attributes = attributes0;
      String string0 = token_StartTag0.toString();
      assertEquals("<[=pualZn'0)x4M\"O/  [pualZn0)x4MO=\"[=pualZn'0)x4M&quot;O/\">", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      token_EndTag0.appendAttributeValue("Character");
      token_EndTag0.appendAttributeValue('^');
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      int[] intArray0 = new int[4];
      token_EndTag0.appendAttributeValue(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      token_EndTag0.appendAttributeValue(')');
      token_EndTag0.appendAttributeValue((String) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      token_EndTag0.appendAttributeName("p");
      token_EndTag0.appendAttributeName("</[unset]>");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.Tag token_Tag0 = token_StartTag0.name("[=pualZn'0)x4M\"O/");
      token_StartTag0.appendTagName('y');
      assertSame(token_StartTag0, token_Tag0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      token_EndTag0.name("");
      // Undeclared exception!
      try { 
        token_EndTag0.name();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.name("[=pualZn'0)x4M\"O/");
      String string0 = token_StartTag0.name();
      assertEquals("[=pualZn'0)x4M\"O/", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      // Undeclared exception!
      try { 
        token_EndTag0.name();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      token_EndTag0.finaliseTag();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.Tag token_Tag0 = token_StartTag0.name("[=pualZn'0)x4M\"O/");
      Attributes attributes0 = new Attributes();
      token_Tag0.attributes = attributes0;
      boolean boolean0 = token_StartTag0.hasAttribute("64<D|K{K*u]d;YE,!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      boolean boolean0 = token_EndTag0.hasAttribute((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.Tag token_Tag0 = token_StartTag0.name("[=pualZn'0)x4M\"O/");
      Attributes attributes0 = new Attributes();
      token_Tag0.attributes = attributes0;
      String string0 = token_StartTag0.toString();
      assertEquals("<[=pualZn'0)x4M\"O/>", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      String string0 = token_StartTag0.toString();
      assertEquals("<[unset]>", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      token_EndTag0.appendAttributeValue("Character");
      token_EndTag0.appendAttributeName('^');
      token_EndTag0.newAttribute();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      token_EndTag0.appendAttributeName("6H*L[uI:X7U");
      token_EndTag0.appendAttributeValue('b');
      token_EndTag0.finaliseTag();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      token_EndTag0.appendAttributeName("");
      token_EndTag0.finaliseTag();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.appendAttributeName('C');
      token_StartTag0.newAttribute();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      token_EndTag0.appendAttributeName("6H*L[uI:X7U");
      token_EndTag0.finaliseTag();
      boolean boolean0 = token_EndTag0.hasAttribute("6H*L[uI:X7U");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.Tag token_Tag0 = token_StartTag0.name("[=pualZn'0)x4M\"O/");
      Attributes attributes0 = new Attributes();
      token_Tag0.attributes = attributes0;
      token_StartTag0.newAttribute();
      assertSame(token_StartTag0, token_Tag0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Token.reset((StringBuilder) null);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      boolean boolean0 = token_Doctype0.isForceQuirks();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      String string0 = token_Doctype0.toString();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("<!doctype >", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      token_Doctype0.getPublicIdentifier();
      assertFalse(token_Doctype0.isForceQuirks());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      token_Doctype0.getPubSysKey();
      assertFalse(token_Doctype0.isForceQuirks());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      Token.Doctype token_Doctype1 = (Token.Doctype)token_Doctype0.reset();
      Token.TokenType token_TokenType0 = Token.TokenType.Comment;
      token_Doctype1.type = token_TokenType0;
      boolean boolean0 = token_Doctype1.isComment();
      assertFalse(token_Doctype0.isForceQuirks());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      token_Doctype0.getSystemIdentifier();
      assertFalse(token_Doctype0.isForceQuirks());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Token.Character token_Character0 = new Token.Character();
      String string0 = token_Character0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Token.Character token_Character0 = new Token.Character();
      Token token0 = token_Character0.reset();
      assertSame(token_Character0, token0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Token.CData token_CData0 = new Token.CData((String) null);
      String string0 = token_CData0.toString();
      assertEquals("<![CDATA[null]]>", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      Token token0 = token_Comment0.reset();
      assertSame(token0, token_Comment0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      String string0 = token_Comment0.toString();
      assertEquals("<!---->", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      boolean boolean0 = token_StartTag0.isSelfClosing();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.setEmptyAttributeValue();
      token_StartTag0.appendAttributeName('C');
      token_StartTag0.newAttribute();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.appendTagName('w');
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      char[] charArray0 = new char[4];
      token_EndTag0.appendAttributeValue(charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      String string0 = token_StartTag0.normalName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      Token.Comment token_Comment1 = token_Comment0.asComment();
      assertSame(token_Comment1, token_Comment0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      Token.Doctype token_Doctype1 = token_Doctype0.asDoctype();
      assertFalse(token_Doctype1.isForceQuirks());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Token.CData token_CData0 = new Token.CData("1.ci^HZ(zn");
      // Undeclared exception!
      try { 
        token_CData0.asStartTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$CData cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      // Undeclared exception!
      try { 
        token_Doctype0.asCharacter();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$Character
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Token.Character token_Character0 = new Token.Character();
      // Undeclared exception!
      try { 
        token_Character0.asEndTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Character cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Token.Character token_Character0 = new Token.Character();
      String string0 = token_Character0.tokenType();
      assertEquals("Character", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      token_Doctype0.isCData();
      assertFalse(token_Doctype0.isForceQuirks());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Token.EOF token_EOF0 = new Token.EOF();
      String string0 = token_EOF0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Token.EOF token_EOF0 = new Token.EOF();
      Token token0 = token_EOF0.reset();
      assertSame(token0, token_EOF0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.Tag token_Tag0 = token_StartTag0.reset();
      assertSame(token_Tag0, token_StartTag0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("org.jsoup.parser.Token$EndTag", attributes0);
      assertSame(token_StartTag0, token_StartTag1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      String string0 = token_EndTag0.toString();
      assertEquals("</[unset]>", string0);
  }
}
