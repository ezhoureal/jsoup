/*
 * This file was automatically generated by EvoSuite
 * Mon Sep 20 22:21:54 GMT 2021
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.CharacterReader;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharacterReader_ESTest extends CharacterReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, 1, 1, ":");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Object must not be null");
      stringReader0.read();
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 12);
      characterReader0.consumeLetterThenDigitSequence();
      characterReader0.consumeTo("i2vH*V");
      characterReader0.consumeLetterSequence();
      characterReader0.consumeRawData();
      assertEquals(12, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("LiDi2oE9Z;T RN5l5;");
      String string0 = characterReader0.toString();
      assertEquals("LiDi2oE9Z;T RN5l5;", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("}U");
      boolean boolean0 = characterReader0.containsIgnoreCase("}U");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(":");
      boolean boolean0 = characterReader0.containsIgnoreCase(":");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("y");
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("org.jsoup.parser.CharacterReader");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R8~\"$Z5& ?EQ&9");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 5);
      stringReader0.read();
      characterReader0.consumeData();
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(5, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("R/.d}B%dKT(?4");
      characterReader0.advance();
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(1, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("{(/=g}(_");
      characterReader0.consumeData();
      boolean boolean0 = characterReader0.matchesDigit();
      assertEquals(8, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("R/.d}B%dKT(?4");
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("~Mh6o9. sOy?WQ2");
      boolean boolean0 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("xL.^)bQb]Wl");
      boolean boolean0 = characterReader0.matchesAsciiAlpha();
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("`DJj^_pK1YyB5I");
      boolean boolean0 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("/A21@O[(.B]");
      boolean boolean0 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("R/.d}B%dKT(?4");
      boolean boolean0 = characterReader0.matchesAsciiAlpha();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("~Mh6o9. sOy?WQ2");
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Object must not be null");
      stringReader0.read();
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 12);
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Object must not be null");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 12);
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(0, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("LiDi2oE9Z;T RN5l5;");
      characterReader0.consumeToEnd();
      boolean boolean0 = characterReader0.matchesLetter();
      assertEquals(19, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1o}M+HH#{bj)Hz\"f$@k");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("p976)=");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 243);
      char[] charArray0 = new char[3];
      charArray0[2] = 'p';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      characterReader0.consumeTagName();
      char[] charArray0 = new char[1];
      characterReader0.matchesAnySorted(charArray0);
      assertEquals(30, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("y");
      characterReader0.consumeLetterSequence();
      char[] charArray0 = new char[4];
      characterReader0.matchesAny(charArray0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#6Leeg");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      char[] charArray0 = new char[6];
      characterReader0.consumeToEnd();
      characterReader0.unconsume();
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals(5, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-|P?8b-NUT,5X");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.matchesIgnoreCase("l:PY>+Y");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0U1Dtg))/n");
      characterReader0.matchConsumeIgnoreCase("0U1Dtg))/n");
      characterReader0.advance();
      characterReader0.toString();
      assertEquals(11, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("h1A");
      characterReader0.consumeLetterThenDigitSequence();
      boolean boolean0 = characterReader0.matchesIgnoreCase("h1");
      assertEquals(2, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      boolean boolean0 = characterReader0.matchConsume("X62DhYNX]6.{M/N 7>");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0U1Dtg))/n");
      boolean boolean0 = characterReader0.matchConsume("2iT0 qQEBFWIC'9");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("LiDi2oE9Z;T RN5l5;");
      characterReader0.matches('C');
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1'LTK[~IQG");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 100);
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("1", string0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Object must not be null");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 12);
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("LiDi2oE9Z;T RN5l5;");
      characterReader0.consumeToEnd();
      characterReader0.consumeDigitSequence();
      assertEquals(19, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("xe?QOdpcYy5H#A]]");
      characterReader0.advance();
      characterReader0.consumeHexSequence();
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("LiDi2oE9Z;T RN5l5;");
      characterReader0.consumeTo("Mark invalid");
      characterReader0.consumeHexSequence();
      assertEquals(9, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("LiDi2oE9Z;T RN5l5;");
      characterReader0.consumeHexSequence();
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("LiDi2oE9Z;T RN5l5;");
      characterReader0.consumeToEnd();
      characterReader0.consumeHexSequence();
      assertEquals(19, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Object must not be null");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 12);
      characterReader0.consumeLetterThenDigitSequence();
      characterReader0.consumeTo("i2vH*V");
      characterReader0.consumeLetterSequence();
      characterReader0.consumeRawData();
      assertEquals(12, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("h1A");
      characterReader0.consumeLetterThenDigitSequence();
      characterReader0.consumeHexSequence();
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Object must not be null");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 12);
      characterReader0.consumeLetterSequence();
      assertEquals(6, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ID{");
      characterReader0.consumeLetterSequence();
      characterReader0.consume();
      characterReader0.consumeLetterSequence();
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("WhRQba`>");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeTagName();
      assertEquals(7, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("_gNV<m>RsMp('>");
      characterReader0.consumeTagName();
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("/A21@O[(.B]");
      characterReader0.consumeTagName();
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("LiDi2oE9Z;T RN5l5;");
      characterReader0.consumeTagName();
      characterReader0.consumeHexSequence();
      assertEquals(12, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ID{");
      characterReader0.consumeLetterSequence();
      characterReader0.consume();
      characterReader0.consumeRawData();
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Q<Q1,3D");
      characterReader0.consumeRawData();
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ID{");
      characterReader0.consumeLetterSequence();
      characterReader0.consume();
      characterReader0.consumeAttributeQuoted(false);
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("@ToU'&)");
      characterReader0.consumeAttributeQuoted(true);
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("_gNV<m>RsMp('>");
      characterReader0.consumeAttributeQuoted(false);
      assertEquals(12, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("CaG&FsG)}7t6Z*Jt");
      characterReader0.consumeAttributeQuoted(false);
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1o}M+HH#{bj)Hz\"f$@k");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.consumeAttributeQuoted(true);
      assertEquals(19, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ID{");
      characterReader0.consumeLetterSequence();
      characterReader0.consume();
      characterReader0.consumeData();
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("_gNV<m>RsMp('>");
      characterReader0.consumeData();
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("~Mho&9. sOy?WQ2");
      characterReader0.consumeData();
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#6Leeg");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      char[] charArray0 = new char[6];
      characterReader0.consumeToEnd();
      characterReader0.consumeToAnySorted(charArray0);
      assertEquals(6, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      char[] charArray0 = new char[1];
      charArray0[0] = 'r';
      characterReader0.consumeToAnySorted(charArray0);
      boolean boolean0 = characterReader0.matches('r');
      assertEquals(1, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ID{");
      characterReader0.consumeLetterSequence();
      characterReader0.consume();
      char[] charArray0 = new char[2];
      characterReader0.consumeToAny(charArray0);
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ZB;m`YXHYx3LII0>Rlf");
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      characterReader0.consumeToAny(charArray0);
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals(6, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("h1A");
      characterReader0.consumeTo("Mark invalid");
      boolean boolean0 = characterReader0.matches('C');
      assertEquals(3, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("LiDi2oE9Z;T' RN5l5;");
      String string0 = characterReader0.consumeTo("LiDi2oE9Z;T' RN5l5;");
      assertEquals(0, characterReader0.pos());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("bduR]_\"4vSJ+0m");
      characterReader0.consumeTo('m');
      assertEquals(13, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("s-/");
      characterReader0.consumeTo('\\');
      assertEquals(3, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-|P?8b-NUT,5X");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.containsIgnoreCase("-|P?8b-NUT,5X");
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ZB;m`YXHYx3LII0>Rlf");
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("y");
      characterReader0.mark();
      characterReader0.rewindToMark();
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("^##%>a-'F1");
      // Undeclared exception!
      try { 
        characterReader0.unconsume();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: WTF: No buffer left to unconsume.
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("_gNV<m>RsMp('>");
      char[] charArray0 = new char[6];
      characterReader0.consumeToAnySorted(charArray0);
      char char0 = characterReader0.consume();
      assertEquals(15, characterReader0.pos());
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("_gNV<m>RsMp('>");
      char[] charArray0 = new char[6];
      characterReader0.consumeToAnySorted(charArray0);
      char char0 = characterReader0.current();
      assertEquals(14, characterReader0.pos());
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("kPwRi)T-5Y");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      char char0 = characterReader0.current();
      assertEquals('k', char0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-|P?8b-NUT,5X");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.matchConsume("-|P?8b-NUT,5X");
      characterReader0.consumeLetterThenDigitSequence();
      assertEquals(15, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("LiDi2oE9Z;T RN5l5;");
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      boolean boolean0 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("LiDi2oE9Z;T RN5l5;");
      characterReader0.trackNewlines(true);
      int int0 = characterReader0.lineNumber();
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("LiDi2oE9Z;T RN5l5;");
      characterReader0.trackNewlines(true);
      characterReader0.trackNewlines(true);
      assertTrue(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1o}M+HH#{bj)Hz\"f$@k");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.trackNewlines(true);
      int int0 = characterReader0.columnNumber();
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      characterReader0.trackNewlines(false);
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      characterReader0.mark();
      characterReader0.consumeTagName();
      boolean boolean0 = characterReader0.matchesIgnoreCase("");
      assertEquals(30, characterReader0.pos());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("ID{");
      char[] charArray0 = new char[0];
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(0, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("CaG&FsG)}7t6Z*Jt");
      characterReader0.rangeEquals(2351, 2351, "SbzzTU*H[+MFjZ>tjo");
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.close();
      characterReader0.close();
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      String string0 = characterReader0.cursorPos();
      assertEquals("1:1", string0);
  }
}
