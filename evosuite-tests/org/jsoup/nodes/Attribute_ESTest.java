/*
 * This file was automatically generated by EvoSuite
 * Mon Sep 20 21:49:42 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.OutputStream;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("<3Y*]+u^[v)a-m", (String) null, attributes0);
      attribute0.hashCode();
      assertFalse(attribute0.hasDeclaredValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = new Attribute("sortable", "sortable", (Attributes) null);
      attribute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-seamless", (String) null, (Attributes) null);
      Attribute attribute1 = new Attribute("data-seamless", (String) null);
      attribute1.setValue("data-seamles");
      boolean boolean0 = attribute0.equals(attribute1);
      assertEquals("data-seamles", attribute1.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-seamless", (String) null, (Attributes) null);
      Attribute attribute1 = new Attribute("data-seamless", (String) null);
      boolean boolean0 = attribute0.equals(attribute1);
      assertFalse(attribute1.hasDeclaredValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attribute attribute0 = new Attribute("fI_0h-Wu/_", "fI_0h-Wu/_");
      Attributes attributes0 = new Attributes();
      Attribute attribute1 = new Attribute("tG#=[zgVM)", "tG#=[zgVM)", attributes0);
      boolean boolean0 = attribute0.equals(attribute1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attribute attribute0 = new Attribute("textarea", "textarea");
      Attribute attribute1 = Attribute.createFromEncoded("textarea", "textarea");
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attribute attribute0 = new Attribute("sortable", "sortable", (Attributes) null);
      boolean boolean0 = attribute0.equals("sortable");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("org.jsoup.nodes.Entities$CoreCharset", "org.jsoup.nodes.Entities$CoreCharset", attributes0);
      boolean boolean0 = attribute0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("sortable", "limitedQuirks", document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("data-data-J?RWS", (String) null, document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      boolean boolean0 = Attribute.shouldCollapseAttribute("ksvNL;VyTX3u>6'CO", "ksvNL;VyTX3u>6'CO", document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-Splitoffsetmustnotbegreaterthancurrenttextlength");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      String string0 = Attribute.getValidKey("{-=", document_OutputSettings_Syntax0);
      assertEquals("{-", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      String string0 = Attribute.getValidKey("", document_OutputSettings_Syntax0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      String string0 = Attribute.getValidKey("g-5kpNH++I+%J", document_OutputSettings_Syntax0);
      assertNotNull(string0);
      assertEquals("g-5kpNHIJ", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("\u0000", "", (Appendable) mockPrintWriter0, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.htmlNoValidate("open", "open", mockPrintStream0, document_OutputSettings0);
      assertEquals("open", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "baseUri", 0, 0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      // Undeclared exception!
      try { 
        Attribute.html("baseUri", "data-", (Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("g@0nr~gB+", true);
      Attribute attribute0 = new Attribute("g@0nr~gB+", "g@0nr~gB+", attributes0);
      attribute0.setValue((String) null);
      assertFalse(attribute0.hasDeclaredValue());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("g@0nr~gB+", "g@0nr~gB+", attributes0);
      attribute0.setValue((String) null);
      assertFalse(attribute0.hasDeclaredValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("open", "open", attributes0);
      boolean boolean0 = attribute0.hasDeclaredValue();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("UTF-32", (String) null, attributes0);
      boolean boolean0 = attribute0.hasDeclaredValue();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attribute attribute0 = new Attribute(",!UgbUEFv-MHKid6", ",!UgbUEFv-MHKid6");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(attribute0);
      String[] stringArray0 = new String[7];
      attributes1.keys = stringArray0;
      attribute0.setKey(",!UgbUEFv-MHKid6");
      assertEquals(",!UgbUEFv-MHKid6", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("F,jQ~cv?o/oFMqdDv", "F,jQ~cv?o/oFMqdDv");
      attribute0.setKey("Ksc}HuBR\"R.u|=D");
      assertEquals("Ksc}HuBR\"R.u|=D", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("truespeed", "truespeed");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("org.jsoup.nodes.Document$OutputSettings", "s,(?uP'2`", attributes0);
      String string0 = attribute0.toString();
      //  // Unstable assertion: assertEquals("org.jsoup.nodes.Document$OutputSettings", attribute0.getKey());
      //  // Unstable assertion: assertEquals("s,(?uP'2`", attribute0.getValue());
      //  // Unstable assertion: assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attribute attribute0 = new Attribute("US-ASCII", "(.H7A");
      Attribute attribute1 = attribute0.clone();
      assertEquals("(.H7A", attribute1.getValue());
      assertEquals("US-ASCII", attribute1.getKey());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attribute attribute0 = new Attribute("iM E](T\".^7", "iM E](T\".^7");
      boolean boolean0 = attribute0.isDataAttribute();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attribute attribute0 = new Attribute("US-ASCII", "(.H7A");
      Attributes attributes0 = new Attributes();
      attributes0.put(attribute0);
      assertEquals("US-ASCII", attribute0.getKey());
      
      attribute0.setKey("(.H7A");
      assertEquals("(.H7A", attribute0.getValue());
  }
}
