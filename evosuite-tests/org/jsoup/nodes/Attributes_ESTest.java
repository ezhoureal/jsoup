/*
 * This file was automatically generated by EvoSuite
 * Mon Sep 20 21:43:09 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.parser.ParseSettings;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Attributes_ESTest extends Attributes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add((String) null, (String) null);
      // Undeclared exception!
      try { 
        attributes1.asList();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(">p#Rjq", ">p#Rjq");
      attributes1.add(">p#Rjq", ">p#Rjq");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      int int0 = attributes1.deduplicate(parseSettings0);
      assertEquals(1, attributes1.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("data-", true);
      attributes1.put("v*fP#;%F e^r", "v*fP#;%F e^r");
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      int int0 = attributes1.deduplicate(parseSettings0);
      assertEquals(2, attributes1.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Entities", true);
      Attributes attributes2 = attributes1.clone();
      attributes2.addAll(attributes1);
      boolean boolean0 = attributes2.equals(attributes1);
      assertEquals(1, attributes0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Entities", true);
      Attributes attributes2 = attributes1.clone();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "caption";
      attributes1.vals = stringArray0;
      boolean boolean0 = attributes2.equals(attributes1);
      assertFalse(attributes0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Entities", true);
      Attributes attributes2 = attributes1.clone();
      boolean boolean0 = attributes2.equals(attributes1);
      assertEquals(1, attributes0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attribute attribute0 = Attribute.createFromEncoded("ih_ ", "");
      Attributes attributes2 = attributes1.put(attribute0);
      Attributes attributes3 = attributes0.put("org.jsoup.nodes.Attributes$1", true);
      boolean boolean0 = attributes2.equals(attributes3);
      assertFalse(attributes0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("d(x ]q&3vgN(Rq", "caption");
      Attributes attributes1 = attributes0.clone();
      boolean boolean0 = attributes1.equals(attributes0);
      assertFalse(attributes0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("d(x ]q&3vgN(Rq", "caption");
      Attributes attributes1 = new Attributes();
      boolean boolean0 = attributes0.equals(attributes1);
      assertEquals(1, attributes0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.equals("org.jsoup.nodes.Attributes$1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(">p#Rjq", ">p#Rjq");
      String string0 = attributes1.html();
      assertFalse(attributes0.isEmpty());
      assertEquals(" >p#Rjq=\">p#Rjq\"", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add("/:z/", "org.jsoup.nodes.Attributes$Dataset");
      attributes0.html();
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add("", "rg;shSk? k;");
      attributes0.html();
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("/data-", "y;@N :=JZ4_|{rDN1Vi");
      attributes0.asList();
      assertFalse(attributes0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("/data-", "y;@N :=JZ4_|{rDN1Vi");
      attributes1.addAll(attributes0);
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.addAll(attributes0);
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      int int0 = attributes0.deduplicate(parseSettings0);
      assertTrue(attributes0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("R~-S'^dFFBd", "R~-S'^dFFBd");
      Attributes attributes1 = attributes0.put(attribute0);
      boolean boolean0 = attributes1.hasDeclaredValueForKeyIgnoreCase("R~-S'^dFFBd");
      assertEquals(1, attributes0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Entities", true);
      boolean boolean0 = attributes1.hasDeclaredValueForKeyIgnoreCase("org.jsoup.nodes.Entities");
      assertEquals(1, attributes0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.hasDeclaredValueForKeyIgnoreCase("data-");
      assertFalse(boolean0);
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("", true);
      boolean boolean0 = attributes0.hasDeclaredValueForKey("");
      assertEquals(1, attributes0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add("", "");
      boolean boolean0 = attributes0.hasDeclaredValueForKey("");
      assertEquals(1, attributes0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.hasDeclaredValueForKey("A0Ah}B1s46");
      assertTrue(attributes0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("2uVXEhfLH8X_#H!", true);
      boolean boolean0 = attributes1.hasKeyIgnoreCase("2uVXEhfLH8X_#H!");
      assertEquals(1, attributes0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.hasKeyIgnoreCase("org.jsoup.nodes.Attributes$1");
      assertFalse(boolean0);
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(">p#Rjq", ">p#Rjq");
      boolean boolean0 = attributes1.hasKey(">p#Rjq");
      assertEquals(1, attributes0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.hasKey("/:z/");
      assertFalse(boolean0);
      assertTrue(attributes0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("defer", "defer");
      assertEquals(1, attributes0.size());
      
      attributes1.removeIgnoreCase("defer");
      assertTrue(attributes0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.removeIgnoreCase("$=|VV4A~+;k.#$");
      assertTrue(attributes0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", true);
      Attribute attribute0 = new Attribute("i}t[(#va@", "", attributes1);
      Attributes attributes2 = attributes1.put(attribute0);
      attributes2.remove("");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[7];
      stringArray0[1] = "";
      stringArray0[2] = "";
      attributes0.keys = stringArray0;
      attributes0.putIgnoreCase("J~:>)", "J~:>)");
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      // Undeclared exception!
      try { 
        attributes0.deduplicate(parseSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add("", "rg;shSk? k;");
      assertEquals(1, attributes0.size());
      
      attributes0.put("", false);
      assertTrue(attributes0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", false);
      assertTrue(attributes1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add("/9</4WtQdWPn( sZg", "/9</4WtQdWPn( sZg");
      attributes0.normalize();
      attributes0.putIgnoreCase("/9</4WtQdWPn( sZg", "org.jsoup.nodes.Attributes");
      assertFalse(attributes0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add("", "xhtml");
      attributes0.getIgnoreCase("");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.get("w7");
      assertTrue(attributes0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("org.jsoup.nodes.Attributes$Dataset", "org.jsoup.nodes.Attributes$Dataset", attributes0);
      attributes0.put(attribute0);
      attributes0.get("org.jsoup.nodes.Attributes$Dataset");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("$?%j\"s*x0", "");
      attributes0.put(attribute0);
      attributes0.getIgnoreCase("");
      assertFalse(attributes0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(">p#Rjq", ">p#Rjq");
      attributes1.put(">p#Rjq", true);
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("$?%j\"s*x0", "");
      Attributes attributes1 = attributes0.put(attribute0);
      attributes1.add("6_'l!", "");
      Attributes attributes2 = attributes0.clone();
      attributes1.addAll(attributes0);
      assertFalse(attributes0.isEmpty());
      assertTrue(attributes0.equals((Object)attributes2));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(">p#Rjq", ">p#Rjq");
      Attributes attributes2 = attributes1.add(">p#Rjq", ">p#Rjq");
      attributes2.addAll(attributes1);
      assertFalse(attributes0.isEmpty());
      assertEquals(2, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.hashCode();
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = Attributes.internalKey("org.jsoup.nodes.Attributes$Dataset$EntrySet");
      assertEquals("/org.jsoup.nodes.Attributes$Dataset$EntrySet", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.dataset();
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.toString();
  }
}
