/*
 * This file was automatically generated by EvoSuite
 * Mon Sep 20 21:35:35 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, 1071.7716674481);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      textNode0.outerHtmlHead(stringBuilder0, 228, document_OutputSettings0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Split offset must not be greater than current text length", "org.jsoup.helper.HttpConnection$1");
      document0.prependText("");
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  Split offset must not be greater than current text length\n </body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Split offset must not bY greater than current text length", "Split offset must not bY greater than current text length");
      document0.title("Split offset must not bY greater than current text length");
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head>\n  <title>Split offset must not bY greater than current text length</title>\n </head>\n <body>\n  Split offset must not bY greater than current text length\n </body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Split offset must not be greater than current text length", "org.jsoup.helper.HttpConnection$1");
      document0.append("org.jsoup.helper.HttpConnection$1");
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  Split offset must not be greater than current text length\n </body>\n</html>org.jsoup.helper.HttpConnection$1", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      TextNode textNode0 = TextNode.createFromEncoded("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      textNode0.outerHtmlHead(stringBuilder0, 0, document_OutputSettings1);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextNode textNode0 = new TextNode("style");
      TextNode textNode1 = textNode0.text("style");
      textNode1.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        textNode1.splitText(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextNode textNode0 = new TextNode("@H4Gu9GS*");
      // Undeclared exception!
      try { 
        textNode0.splitText(853);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null);
      // Undeclared exception!
      try { 
        textNode0.splitText((-930));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded(" ");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlTail(charArrayWriter0, 0, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded(" ");
      TextNode textNode1 = textNode0.clone();
      assertFalse(textNode1.equals((Object)textNode0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextNode textNode0 = new TextNode("style");
      String string0 = textNode0.text();
      assertEquals("style", string0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded(" ");
      String string0 = textNode0.toString();
      assertEquals("#text", textNode0.nodeName());
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("org.jsoup.nodes.DocumentType");
      textNode0.splitText(0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = TextNode.stripLeadingWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = TextNode.normaliseWhitespace("org.jsoup.select.Evaluator$IndexEquals");
      assertEquals("org.jsoup.select.Evaluator$IndexEquals", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "$9&tkDk;dQ'");
      CDataNode cDataNode0 = new CDataNode("$g_ ");
      cDataNode0.outerHtmlHead(stringBuilder0, (-1200), (Document.OutputSettings) null);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertEquals("$9&tkDk;dQ'<![CDATA[$g_ ", stringBuilder0.toString());
      assertTrue(boolean0);
  }
}
