/*
 * This file was automatically generated by EvoSuite
 * Mon Sep 20 21:36:09 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DocumentType_ESTest extends DocumentType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("org.jsoup.select.Evaluator$Class", "<!doctype", "");
      String string0 = documentType0.toString();
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals("<!DOCTYPE org.jsoup.select.Evaluator$Class PUBLIC \"<!doctype\">", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("r~Ak8:", "TAjGqEj:1 =Vn", "r~Ak8:");
      MockFile mockFile0 = new MockFile("8o");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      documentType0.outerHtmlHead(mockPrintWriter0, 0, document_OutputSettings1);
      assertEquals("#doctype", documentType0.nodeName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("2M&", "", "d");
      String string0 = documentType0.toString();
      assertEquals("<!DOCTYPE 2M& SYSTEM \"d\">", string0);
      assertEquals("#doctype", documentType0.nodeName());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      documentType0.setPubSysKey("");
      assertEquals("#doctype", documentType0.nodeName());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("dK6^W?6Tu}`;Aqh", "O 5gf[nR", "dK6^W?6Tu}`;Aqh");
      documentType0.setPubSysKey((String) null);
      assertEquals("#doctype", documentType0.nodeName());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      documentType0.toString();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      String string0 = documentType0.systemId();
      assertEquals("", string0);
      assertEquals("#doctype", documentType0.nodeName());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      String string0 = documentType0.publicId();
      assertEquals("", string0);
      assertEquals("#doctype", documentType0.nodeName());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      String string0 = documentType0.name();
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals("", string0);
  }
}
