/*
 * This file was automatically generated by EvoSuite
 * Mon Sep 20 21:50:19 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LeafNode_ESTest extends LeafNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comment comment0 = new Comment("nh6<A>U&_t");
      Element element0 = new Element("nh6<A>U&_t");
      comment0.parentNode = (Node) element0;
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertEquals("#declaration", xmlDeclaration0.nodeName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Children collection to be inserted must not be null.");
      String string0 = textNode0.attr("Children collection to be inserted must not be null.");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("0/yNqv^", "0/yNqv^", "0/yNqv^");
      assertFalse(documentType0.hasParent());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Ogk");
      CDataNode cDataNode1 = cDataNode0.clone();
      assertNotSame(cDataNode1, cDataNode0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextNode textNode0 = new TextNode("$=nP++a");
      textNode0.doSetBaseUri("_zf,T.A$PbHxI");
      assertFalse(textNode0.hasParent());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      Node node0 = cDataNode0.empty();
      assertFalse(node0.hasParent());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("CONTINUE");
      // Undeclared exception!
      try { 
        cDataNode0.absUrl((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Ogk");
      TextNode textNode0 = cDataNode0.text("");
      assertEquals("#cdata", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comment comment0 = new Comment("");
      List<Node> list0 = comment0.ensureChildNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Ogk");
      Node node0 = cDataNode0.removeAttr("small");
      assertEquals("#cdata", node0.nodeName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comment comment0 = new Comment("nh6<A>U&_t");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      XmlDeclaration xmlDeclaration1 = xmlDeclaration0.clone();
      assertNotSame(xmlDeclaration1, xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      cDataNode0.hasAttr("");
  }
}
