/*
 * This file was automatically generated by EvoSuite
 * Mon Sep 20 21:40:52 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("8.");
      document0.append("h3");
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comment comment0 = new Comment("fWGL1");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      Tag tag0 = Tag.valueOf("abs:method");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "dy<", attributes0);
      xmlDeclaration0.hasSameValue(formElement0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comment comment0 = new Comment("fWGL1");
      comment0.hasSameValue((Object) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataNode dataNode0 = new DataNode((String) null);
      dataNode0.hasSameValue(dataNode0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("8.");
      Document document1 = document0.normalise();
      assertEquals(0, document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comment comment0 = new Comment("#text");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      boolean boolean0 = xmlDeclaration0.equals("#text");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextNode textNode0 = new TextNode("+:mVR");
      Node node0 = textNode0.previousSibling();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("8.");
      Element element0 = document0.doClone(document0);
      element0.previousSibling();
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Element element0 = new Element("\"$l#5Ss^gN.(]-2z");
      Document document0 = Parser.parse("\"$l#5Ss^gN.(]-2z", "");
      element0.setParentNode(document0);
      List<Node> list0 = element0.siblingNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("&#xa0;");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead((Appendable) null, 0, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("a1hd");
      document0.prepend("a1hd");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "`Fd88NnTjSpe$BO");
      document0.appendTo(document0);
      document0.before((Node) document0);
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Vmvx4Oi_Q");
      Document document0 = Parser.parse("6vy,N_z$UNc&8[p6q3G", "6vy,N_z$UNc&8[p6q3G");
      // Undeclared exception!
      try { 
        document0.removeChild(cDataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comment comment0 = new Comment("KUf");
      Comment comment1 = comment0.setData("v~~9<<Sd");
      comment1.parentNode = (Node) comment0;
      // Undeclared exception!
      try { 
        comment0.replaceWith(comment1.parentNode);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DataNode dataNode0 = new DataNode("nbn:l]n");
      Document document0 = Parser.parseBodyFragment("", "nbn:l]n");
      // Undeclared exception!
      try { 
        dataNode0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("abs:y -&f3)3");
      Element element0 = document0.head();
      element0.replaceWith(document0);
      document0.unwrap();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("8.");
      Node node0 = document0.wrap("8.");
      assertFalse(node0.hasParent());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comment comment0 = new Comment("KUf");
      Comment comment1 = comment0.setData("vE5~~9<<Sd");
      comment1.parentNode = (Node) comment0;
      // Undeclared exception!
      comment1.parentNode.wrap("KUf");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("8.");
      Document document1 = (Document)document0.doClone(document0);
      Document document2 = (Document)document1.wrap("8.");
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      List<Node> list0 = document0.childNodesCopy();
      assertEquals(1, document0.childNodeSize());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("C`?1,XaJ}BVP`LHfz", "C`?1,XaJ}BVP`LHfz", "C`?1,XaJ}BVP`LHfz");
      List<Node> list0 = documentType0.childNodesCopy();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comment comment0 = new Comment("AFO: qk](]{\"#f^^&");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      Node node0 = xmlDeclaration0.clearAttributes();
      assertEquals("#declaration", node0.nodeName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextNode textNode0 = new TextNode("#root");
      Node node0 = textNode0.clearAttributes();
      assertEquals("#text", node0.nodeName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">^6{RL zC5h,", "head");
      Element element0 = document0.removeAttr(":has(%s)");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = (Document)document0.clearAttributes();
      Document document2 = (Document)document1.removeAttr("abs:");
      assertFalse(document2.isBlock());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">^6{RL zC5h,", "head");
      document0.clearAttributes();
      Elements elements0 = document0.getElementsByAttributeValueContaining("head", "head");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      boolean boolean0 = document0.hasAttr("abs:systemId");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("S7");
      int int0 = document0.attributesSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comment comment0 = new Comment("Whu596");
      int int0 = comment0.attributesSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Tag tag0 = Tag.valueOf("h_$H,1b>.!^R,");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "AbuC0", attributes0);
      String string0 = element0.attr("abs:Should not be reachable");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("U>5. :`,~El}}%:K}B");
      Element element0 = document0.removeClass(",|<&MT//");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">^6{RL zC5h,", "head");
      document0.clearAttributes();
      Set<String> set0 = document0.classNames();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comment comment0 = new Comment("KUf");
      Comment comment1 = new Comment((String) null);
      boolean boolean0 = comment0.hasSameValue(comment1);
      assertEquals(0, comment1.siblingIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Comment comment0 = new Comment("KUf");
      Comment comment1 = comment0.clone();
      comment1.parentNode = (Node) comment1;
      // Undeclared exception!
      comment1.before("KUf");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("^\"DB&a");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Comment comment0 = new Comment("autofocus");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      comment0.html(charArrayWriter0);
      assertEquals(0, comment0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("RR8\"8K,Rsi8Du&L");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node0 = cDataNode0.traverse(nodeVisitor0);
      assertSame(node0, cDataNode0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Comment comment0 = new Comment("KUf");
      Node node0 = comment0.shallowClone();
      assertFalse(node0.hasParent());
      assertNotNull(node0);
      assertNotSame(node0, comment0);
      assertEquals(0, node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DataNode dataNode0 = new DataNode((String) null);
      dataNode0.wrap("_<p&&hE^-<caU<%$r");
      assertTrue(dataNode0.hasParent());
      
      dataNode0.unwrap();
      assertFalse(dataNode0.hasParent());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">^6{RL zC5h,", "head");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Element element0 = document0.filter(nodeFilter0);
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("v c-RTMug^+)");
      // Undeclared exception!
      try { 
        document0.after("v c-RTMug^+)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("l;Gw+5&VU\u0004ye'");
      // Undeclared exception!
      try { 
        document0.after((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
