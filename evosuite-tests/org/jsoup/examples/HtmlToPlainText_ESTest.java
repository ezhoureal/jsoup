/*
 * This file was automatically generated by EvoSuite
 * Mon Sep 20 21:10:40 GMT 2021
 */

package org.jsoup.examples;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.examples.HtmlToPlainText;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HtmlToPlainText_ESTest extends HtmlToPlainText_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36", "multipart/form-data");
      String string0 = htmlToPlainText0.getPlainText(document0);
      assertEquals("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like \nGecko) Chrome/79.0.3945.130 Safari/537.36", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("dd");
      Document document0 = parser0.parseInput((Reader) stringReader0, "L9f");
      Document document1 = document0.normalise();
      String string0 = htmlToPlainText0.getPlainText(document1);
      assertEquals("dd ", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("\n * ");
      Document document0 = parser0.parseInput((Reader) stringReader0, "\n * ");
      document0.normalise();
      htmlToPlainText0.getPlainText(document0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Tag tag0 = Tag.valueOf("a");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "a", attributes0);
      String string0 = htmlToPlainText0.getPlainText(formElement0);
      assertEquals(" <>", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Element element0 = new Element("tr");
      String string0 = htmlToPlainText0.getPlainText(element0);
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Tag tag0 = Tag.valueOf("dt", (ParseSettings) null);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, (String) null, attributes0);
      String string0 = htmlToPlainText0.getPlainText(formElement0);
      assertEquals("  \n", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("li", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "li", attributes0);
      String string0 = htmlToPlainText0.getPlainText(formElement0);
      assertEquals("\n * ", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Tag tag0 = Tag.valueOf("q.G.nt4J-/XSKRCZ}");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      formElement0.prependText("\n");
      String string0 = htmlToPlainText0.getPlainText(formElement0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        HtmlToPlainText.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // usage: java -cp jsoup.jar org.jsoup.examples.HtmlToPlainText url [selector]
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        HtmlToPlainText.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        HtmlToPlainText.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
